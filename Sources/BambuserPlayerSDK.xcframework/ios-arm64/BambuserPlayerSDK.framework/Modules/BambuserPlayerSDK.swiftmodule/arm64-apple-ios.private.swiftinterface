// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BambuserPlayerSDK
import AVFoundation.AVFAudio
import AVFoundation

import Combine
import DeveloperToolsSupport
import EventKit



import Foundation
import Security
import Swift
import SwiftUI
import UIKit.UIDevice
import UIKit.UIFont
import UIKit
import UIKit.UITextField
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims

final public class BambuserConversionTracking {
  final public var onError: ((any Swift.Error) -> Swift.Void)?
  public init()
  final public func collect(_ event: any BambuserPlayerSDK.TrackingEvent)
  final public func cleanTrackingData()
  @objc deinit
}
public enum BambuserEnvironment : Swift.Codable {
  case global
  case eu
  case other(name: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class BambuserPlayerContext {
  public init()
  public func sendEvent(_ event: BambuserPlayerSDK.BambuserPlayerContext.Event)
  @objc deinit
}
extension BambuserPlayerSDK.BambuserPlayerContext {
  public enum Event {
    case enterPiP
    case exitPiP
    case togglePiP
    case resume
    case pause
    public static func == (a: BambuserPlayerSDK.BambuserPlayerContext.Event, b: BambuserPlayerSDK.BambuserPlayerContext.Event) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension BambuserPlayerSDK.BambuserPlayerEvent {
  public struct ChatMessage {
    public enum MessageType {
      case standard
      case reply(originalSenderId: Swift.String, originalSenderName: Swift.String, originalMessage: Swift.String)
    }
    public enum ClientType {
      case moderator
      case host
      case shopper
      public static func == (a: BambuserPlayerSDK.BambuserPlayerEvent.ChatMessage.ClientType, b: BambuserPlayerSDK.BambuserPlayerEvent.ChatMessage.ClientType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public let id: Swift.String?
    public let type: BambuserPlayerSDK.BambuserPlayerEvent.ChatMessage.MessageType
    public let appearedAt: Foundation.Date
    public let senderId: Swift.String?
    public let senderName: Swift.String
    public let broadcastId: Swift.String?
    public let message: Swift.String
    public let avatarUrl: Foundation.URL?
    public let client: BambuserPlayerSDK.BambuserPlayerEvent.ChatMessage.ClientType
  }
  public struct ReplayInfo {
    public let product: BambuserPlayerSDK.Product.Base?
  }
}
public enum BambuserPlayerEvent {
  case playerFailed(error: BambuserPlayerSDK.BambuserPlayerSDKError)
  case openTosOrPpUrl(Foundation.URL)
  case openUrlFromChat(Foundation.URL)
  case openProduct(BambuserPlayerSDK.Product.Base)
  case productAddedToCart(any BambuserPlayerSDK.ProductProtocol)
  case openShareShowSheet(Foundation.URL)
  case openCart
  case hideCart
  case openCalendar(BambuserPlayerSDK.CalendarEvent)
  case close
  case pictureInPictureStateChanged(action: BambuserPlayerSDK.PlayerPipAction)
  case playButtonTapped
  case pauseButtonTapped
  case receivedChatMessages(added: [BambuserPlayerSDK.BambuserPlayerEvent.ChatMessage], removed: [BambuserPlayerSDK.BambuserPlayerEvent.ChatMessage])
  case sentChatMessage(BambuserPlayerSDK.BambuserPlayerEvent.ChatMessage)
  case productWasHighlighted(BambuserPlayerSDK.Product.Base)
  case replay(BambuserPlayerSDK.BambuserPlayerEvent.ReplayInfo)
  case resumed
  case paused
}
public enum BambuserPlayerSDKError : Swift.Error {
  case showInitialization
  case playerInitialization(error: (any Swift.Error)?)
  case openedUrlIsInvalid
  case unknown(error: (any Swift.Error)?)
}
extension BambuserPlayerSDK.BambuserPlayerSDKError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class BambuserPlayerUIView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(showId: Swift.String, environment: BambuserPlayerSDK.BambuserEnvironment? = nil, config: BambuserPlayerSDK.PlayerConfiguration = .standard(), context: BambuserPlayerSDK.BambuserPlayerContext? = nil, playerProductDataSource: (any BambuserPlayerSDK.PlayerProductDataSource)?, playerCartDataSource: (any BambuserPlayerSDK.PlayerCartDataSource)?, playerCartDelegate: (any BambuserPlayerSDK.PlayerCartDelegate)?, handlePlayerEvent: ((BambuserPlayerSDK.BambuserPlayerEvent) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func removeFromSuperview()
  @objc deinit
}
public struct BambuserPlayerView : SwiftUI.UIViewControllerRepresentable {
  public init(showId: Swift.String, environment: BambuserPlayerSDK.BambuserEnvironment? = nil, config: BambuserPlayerSDK.PlayerConfiguration = .standard(), context: BambuserPlayerSDK.BambuserPlayerContext? = nil, playerProductDataSource: (any BambuserPlayerSDK.PlayerProductDataSource)? = nil, playerCartDataSource: (any BambuserPlayerSDK.PlayerCartDataSource)? = nil, playerCartDelegate: (any BambuserPlayerSDK.PlayerCartDelegate)? = nil, handlePlayerEvent: ((BambuserPlayerSDK.BambuserPlayerEvent) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: BambuserPlayerSDK.BambuserPlayerView.Context) -> BambuserPlayerSDK.BambuserPlayerViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: BambuserPlayerSDK.BambuserPlayerViewController, context: BambuserPlayerSDK.BambuserPlayerView.Context)
  @_Concurrency.MainActor(unsafe) public static func dismantleUIViewController(_ uiViewController: BambuserPlayerSDK.BambuserPlayerViewController, coordinator: ())
  public typealias Body = Swift.Never
  public typealias Coordinator = ()
  public typealias UIViewControllerType = BambuserPlayerSDK.BambuserPlayerViewController
}
@_Concurrency.MainActor(unsafe) open class BambuserPlayerViewController : SwiftUI.UIHostingController<BambuserPlayerSDK.PlayerHolderView> {
  @_Concurrency.MainActor(unsafe) public init(showId: Swift.String, environment: BambuserPlayerSDK.BambuserEnvironment? = nil, config: BambuserPlayerSDK.PlayerConfiguration = .standard(), context: BambuserPlayerSDK.BambuserPlayerContext? = nil, playerProductDataSource: (any BambuserPlayerSDK.PlayerProductDataSource)? = nil, playerCartDataSource: (any BambuserPlayerSDK.PlayerCartDataSource)? = nil, playerCartDelegate: (any BambuserPlayerSDK.PlayerCartDelegate)? = nil, handlePlayerEvent: ((BambuserPlayerSDK.BambuserPlayerEvent) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @objc deinit
}
public struct PlayerHolderView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s17BambuserPlayerSDK0B10HolderViewV4bodyQrvp", 0) __
}
#if compiler(>=5.3) && $Actors
public actor CalendarEvent {
  public init(title: Swift.String, startDate: Foundation.Date, endDate: Foundation.Date, url: Foundation.URL)
  final public let title: Swift.String
  final public let startDate: Foundation.Date
  final public let endDate: Foundation.Date
  final public let url: Foundation.URL
  @available(*, deprecated, message: "This type has been deprecated. Method -saveToCalendar: won't use soon.")
  public typealias AddToCalendarCompletion = (BambuserPlayerSDK.CalendarEvent.AddToCalendarResult) -> Swift.Void
  @available(*, deprecated, message: "This type has been deprecated. Method -saveToCalendar: won't use soon.")
  public typealias AddToCalendarResult = Swift.Result<Swift.Void, BambuserPlayerSDK.CalendarEvent.AddToCalendarError>
  public typealias CalendarEventPicker = (any BambuserPlayerSDK.EventStoreProtocol) -> (any BambuserPlayerSDK.CalendarProtocol)?
  @available(*, deprecated, message: "This type has been deprecated. Please use 'CalendarEventPicker'.")
  public typealias CalendarPicker = (EventKit.EKEventStore) -> EventKit.EKCalendar?
  public typealias StoreEventPicker = () -> any BambuserPlayerSDK.EventStoreProtocol
  @available(*, deprecated, message: "This type has been deprecated. Please use 'StoreEventPicker'.")
  public typealias StorePicker = () -> EventKit.EKEventStore
  public enum AddToCalendarError : Swift.Error {
    case calendarAccessNotGranted
    case defaultCalendarNotFound
    case error(any Swift.Error)
  }
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func save(to calendar: @escaping BambuserPlayerSDK.CalendarEvent.CalendarEventPicker = { $0.defaultCalendarForNewEvents }, in store: any BambuserPlayerSDK.EventStoreProtocol = EKEventStore()) async throws -> Swift.Bool
  #endif
  @available(*, deprecated, message: "This method has been deprecated. Please use -save:.")
  public func saveToCalendar(_ calendar: @escaping BambuserPlayerSDK.CalendarEvent.CalendarPicker = { $0.defaultCalendarForNewEvents }, in store: @escaping BambuserPlayerSDK.CalendarEvent.StorePicker = { EKEventStore() }, completion: @escaping BambuserPlayerSDK.CalendarEvent.AddToCalendarCompletion)
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
#endif
public protocol CalendarProtocol {
}
public struct ColorVariant : Swift.Equatable, Swift.Codable {
  public var id: Swift.String
  public var name: Swift.String
  public var imageUrls: [Foundation.URL]
  public var sizes: [BambuserPlayerSDK.SizeVariant]
  public init(id: Swift.String, name: Swift.String, color: UIKit.UIColor?, imageUrls: [Foundation.URL], sizes: [BambuserPlayerSDK.SizeVariant])
  public init(id: Swift.String, name: Swift.String, colorHex: Swift.String, imageUrls: [Foundation.URL], sizes: [BambuserPlayerSDK.SizeVariant])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: BambuserPlayerSDK.ColorVariant, b: BambuserPlayerSDK.ColorVariant) -> Swift.Bool
}
extension EventKit.EKCalendar : BambuserPlayerSDK.CalendarProtocol {
}
extension EventKit.EKEventStore : BambuserPlayerSDK.EventStoreProtocol {
  public func createEKEvent() -> EventKit.EKEvent
}
public protocol EventStoreProtocol {
  var defaultCalendarForNewEvents: EventKit.EKCalendar? { get }
  func createEKEvent() -> EventKit.EKEvent
  @available(iOS 17.0, *)
  func requestWriteOnlyAccessToEvents(completion: @escaping EventKit.EKEventStoreRequestAccessCompletionHandler)
  func requestAccess(to entityType: EventKit.EKEntityType, completion: @escaping EventKit.EKEventStoreRequestAccessCompletionHandler)
  func save(_ event: EventKit.EKEvent, span: EventKit.EKSpan, commit: Swift.Bool) throws
}
extension BambuserPlayerSDK.PlayerUIConfiguration {
  public enum HighlightedProductsLayout : Swift.CaseIterable, Swift.Codable, Swift.Equatable {
    public init(rawValue: Swift.String, date: Foundation.Date? = nil)
    public var rawValue: Swift.String {
      get
    }
    public static var allCases: [BambuserPlayerSDK.PlayerUIConfiguration.HighlightedProductsLayout] {
      get
    }
    public var isAutomatic: Swift.Bool {
      get
    }
    case configurable(date: Foundation.Date)
    case classic
    case modern
    public static func == (a: BambuserPlayerSDK.PlayerUIConfiguration.HighlightedProductsLayout, b: BambuserPlayerSDK.PlayerUIConfiguration.HighlightedProductsLayout) -> Swift.Bool
    public typealias AllCases = [BambuserPlayerSDK.PlayerUIConfiguration.HighlightedProductsLayout]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct InCartProductModel : Swift.Identifiable {
  public let id: Swift.String
  public var product: BambuserPlayerSDK.Product.Hydrated
  public var selectedColor: BambuserPlayerSDK.ColorVariant
  public var selectedSize: BambuserPlayerSDK.SizeVariant
  public var quantity: Swift.Int
  public init(product: BambuserPlayerSDK.Product.Hydrated, selectedColor: BambuserPlayerSDK.ColorVariant, selectedSize: BambuserPlayerSDK.SizeVariant, quantity: Swift.Int)
  public typealias ID = Swift.String
}
extension BambuserPlayerSDK.InCartProductModel : Swift.Equatable {
  public static func == (lhs: BambuserPlayerSDK.InCartProductModel, rhs: BambuserPlayerSDK.InCartProductModel) -> Swift.Bool
}
public enum LiveShoppingShareHelper {
  public static func share(url: Foundation.URL, on controller: UIKit.UIViewController)
}
public class PictureInPictureConfiguration : Foundation.ObservableObject, Swift.Codable, Swift.Equatable {
  public init(isEnabled: Swift.Bool = true, isAutomatic: Swift.Bool = true, hideUiOnPip: Swift.Bool = true)
  required public init(from decoder: any Swift.Decoder) throws
  @Combine.Published @_projectedValueProperty($isAutomatic) public var isAutomatic: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isAutomatic: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isEnabled) public var isEnabled: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isEnabled: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($hideUiOnPip) public var hideUiOnPip: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $hideUiOnPip: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension BambuserPlayerSDK.PictureInPictureConfiguration {
  public static let standard: BambuserPlayerSDK.PictureInPictureConfiguration
}
extension BambuserPlayerSDK.PictureInPictureConfiguration {
  public enum CodingKeys : Swift.CodingKey {
    case isAutomatic
    case isEnabled
    case hideUiOnPip
    public static func == (a: BambuserPlayerSDK.PictureInPictureConfiguration.CodingKeys, b: BambuserPlayerSDK.PictureInPictureConfiguration.CodingKeys) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public var hashValue: Swift.Int {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BambuserPlayerSDK.PictureInPictureConfiguration {
  public static func == (lhs: BambuserPlayerSDK.PictureInPictureConfiguration, rhs: BambuserPlayerSDK.PictureInPictureConfiguration) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class PictureInPictureState {
  public static var shared: BambuserPlayerSDK.PictureInPictureState {
    get
  }
  public typealias RestoreAction = (@escaping () -> Swift.Void) -> Swift.Void
  public typealias CloseAction = () -> Swift.Void
  final public var isPictureInPictureActive: Swift.Bool {
    get
  }
  final public func restorePlayer()
  @objc deinit
}
public protocol PlayerCartDataSource : AnyObject {
  func playerCartItems() -> [BambuserPlayerSDK.InCartProductModel]
  var playerCartSyncItem: ((BambuserPlayerSDK.InCartProductModel, _ isRemoved: Swift.Bool) -> Swift.Void)? { get set }
}
public protocol PlayerCartDelegate : AnyObject {
  var playerCartCheckoutTapped: () -> Swift.Void { get set }
  func playerCartItemUpdated(_ item: BambuserPlayerSDK.InCartProductModel, isRemoved: Swift.Bool)
}
public class PlayerConfiguration : Foundation.ObservableObject, Swift.Codable {
  public init(pipConfig: BambuserPlayerSDK.PictureInPictureConfiguration = .standard, uiConfig: BambuserPlayerSDK.PlayerUIConfiguration = .minimal, preferredLocale: Foundation.Locale? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  public var pipConfig: BambuserPlayerSDK.PictureInPictureConfiguration
  public var uiConfig: BambuserPlayerSDK.PlayerUIConfiguration
  public var preferredLocale: Foundation.Locale?
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension BambuserPlayerSDK.PlayerConfiguration {
  public static func standard() -> BambuserPlayerSDK.PlayerConfiguration
}
extension BambuserPlayerSDK.PlayerConfiguration {
  public enum CodingKeys : Swift.CodingKey {
    case pipConfig
    case uiConfig
    case preferredLocale
    public static func == (a: BambuserPlayerSDK.PlayerConfiguration.CodingKeys, b: BambuserPlayerSDK.PlayerConfiguration.CodingKeys) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public var hashValue: Swift.Int {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func copy() -> BambuserPlayerSDK.PlayerConfiguration?
}
public enum PlayerOverlayVisiblity : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Equatable {
  case visible, hidden
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BambuserPlayerSDK.PlayerOverlayVisiblity]
  public typealias RawValue = Swift.String
  public static var allCases: [BambuserPlayerSDK.PlayerOverlayVisiblity] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum PlayerPipAction {
  case open
  case close
  case restore
  public static func == (a: BambuserPlayerSDK.PlayerPipAction, b: BambuserPlayerSDK.PlayerPipAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PlayerState : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Equatable {
  case idle
  case loaded
  case ready
  case closed
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BambuserPlayerSDK.PlayerState]
  public typealias RawValue = Swift.String
  public static var allCases: [BambuserPlayerSDK.PlayerState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public class PlayerUIConfiguration : Combine.ObservableObject, Swift.Codable, Swift.Equatable {
  public init(allUi: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, showNumberOfViewers: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, closeButton: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, chatOverlay: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, chatInputField: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, emojiOverlay: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, productList: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, productListLayout: BambuserPlayerSDK.PlayerUIConfiguration.HighlightedProductsLayout = .modern, actionBar: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, emojiButton: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, cartButton: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, productsOnEndCurtain: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, productPlayButton: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, chatVisibilityButton: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, chatSize: CoreFoundation.CGSize? = nil, shareButton: BambuserPlayerSDK.PlayerOverlayVisiblity = .visible, ignoreSystemInsets: Swift.Bool = false, usePlayerCartView: Swift.Bool = true, usePlayerProductView: Swift.Bool = true)
  required public init(from decoder: any Swift.Decoder) throws
  @Combine.Published @_projectedValueProperty($allUI) public var allUI: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $allUI: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($showNumberOfViewers) public var showNumberOfViewers: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $showNumberOfViewers: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($closeButton) public var closeButton: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $closeButton: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($chatOverlay) public var chatOverlay: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $chatOverlay: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($chatInputField) public var chatInputField: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $chatInputField: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($emojiOverlay) public var emojiOverlay: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $emojiOverlay: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($productList) public var productList: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $productList: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($productListLayout) public var productListLayout: BambuserPlayerSDK.PlayerUIConfiguration.HighlightedProductsLayout {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $productListLayout: Combine.Published<BambuserPlayerSDK.PlayerUIConfiguration.HighlightedProductsLayout>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($actionBar) public var actionBar: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $actionBar: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($emojiButton) public var emojiButton: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $emojiButton: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($cartButton) public var cartButton: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $cartButton: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($chatVisibilityButton) public var chatVisibilityButton: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $chatVisibilityButton: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($chatSize) public var chatSize: CoreFoundation.CGSize? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $chatSize: Combine.Published<CoreFoundation.CGSize?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($shareButton) public var shareButton: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $shareButton: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($productsOnEndCurtain) public var productsOnEndCurtain: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $productsOnEndCurtain: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($productPlayButton) public var productPlayButton: BambuserPlayerSDK.PlayerOverlayVisiblity {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $productPlayButton: Combine.Published<BambuserPlayerSDK.PlayerOverlayVisiblity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($ignoreSystemInsets) public var ignoreSystemInsets: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $ignoreSystemInsets: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($usePlayerCartView) public var usePlayerCartView: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $usePlayerCartView: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($usePlayerProductView) public var usePlayerProductView: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $usePlayerProductView: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension BambuserPlayerSDK.PlayerUIConfiguration {
  public static let minimal: BambuserPlayerSDK.PlayerUIConfiguration
  public static let full: BambuserPlayerSDK.PlayerUIConfiguration
}
extension BambuserPlayerSDK.PlayerUIConfiguration {
  public enum CodingKeys : Swift.CodingKey {
    case allUI
    case showNumberOfViewers
    case closeButton
    case chatOverlay
    case chatInputField
    case emojiOverlay
    case productList
    case productListLayout
    case actionBar
    case emojiButton
    case cartButton
    case productsOnEndCurtain
    case chatVisibilityButton
    case shareButton
    case productPlayButton
    case ignoreSystemInsets
    case chatSize
    case usePlayerCartView
    case usePlayerProductView
    public static func == (a: BambuserPlayerSDK.PlayerUIConfiguration.CodingKeys, b: BambuserPlayerSDK.PlayerUIConfiguration.CodingKeys) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public var hashValue: Swift.Int {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BambuserPlayerSDK.PlayerUIConfiguration {
  public static func == (lhs: BambuserPlayerSDK.PlayerUIConfiguration, rhs: BambuserPlayerSDK.PlayerUIConfiguration) -> Swift.Bool
}
public struct Product : Swift.Codable {
  public struct Base : BambuserPlayerSDK.ProductProtocol, Swift.Identifiable, Swift.Equatable {
    public let id: Swift.String
    public let title: Swift.String?
    public let brand: Swift.String?
    public let productReference: Swift.String
    public let publicUrl: Swift.String
    public let thumbnail: Swift.String?
    public var url: Foundation.URL? {
      get
    }
    public var thumbnailUrl: Foundation.URL? {
      get
    }
    public var name: Swift.String {
      get
    }
    public var brandLabel: Swift.String? {
      get
    }
    public var currency: Swift.String {
      get
    }
    public var priceValue: Foundation.Decimal? {
      get
    }
    public var originalPrice: Foundation.Decimal? {
      get
    }
    public static func == (a: BambuserPlayerSDK.Product.Base, b: BambuserPlayerSDK.Product.Base) -> Swift.Bool
    public typealias ID = Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Hydrated : BambuserPlayerSDK.ProductProtocol {
    public let id: Swift.String
    public let name: Swift.String
    public let brand: Swift.String
    public let shortDescription: Swift.String
    public let description: Swift.String
    public let price: Foundation.Decimal
    public let originalPrice: Foundation.Decimal?
    public let currency: Swift.String
    public let colors: [BambuserPlayerSDK.ColorVariant]
    public var priceValue: Foundation.Decimal? {
      get
    }
    public var brandLabel: Swift.String? {
      get
    }
    public var thumbnailUrl: Foundation.URL? {
      get
    }
    public init(id: Swift.String, name: Swift.String, brand: Swift.String, shortDescription: Swift.String, description: Swift.String, price: Foundation.Decimal, originalPrice: Foundation.Decimal?, currency: Swift.String, colors: [BambuserPlayerSDK.ColorVariant])
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension BambuserPlayerSDK.Product.Hydrated : Swift.Equatable {
  public static func == (lhs: BambuserPlayerSDK.Product.Hydrated, rhs: BambuserPlayerSDK.Product.Hydrated) -> Swift.Bool
}
extension BambuserPlayerSDK.Product {
  public struct Request : Swift.Codable {
    public let id: Swift.String
    public let productReference: Swift.String
    public let publicUrl: Swift.String
    public init(id: Swift.String, productReference: Swift.String, publicUrl: Swift.String)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public protocol PlayerProductDataSource : AnyObject {
  #if compiler(>=5.3) && $AsyncAwait
  func productHydration(for product: BambuserPlayerSDK.Product.Request) async throws -> BambuserPlayerSDK.Product.Hydrated?
  #endif
}
public protocol ProductProtocol : Swift.Decodable, Swift.Encodable {
  var id: Swift.String { get }
  var name: Swift.String { get }
  var brandLabel: Swift.String? { get }
  var currency: Swift.String { get }
  var priceValue: Foundation.Decimal? { get }
  var originalPrice: Foundation.Decimal? { get }
  var thumbnailUrl: Foundation.URL? { get }
}
extension BambuserPlayerSDK.ProductProtocol {
  public var hydrated: BambuserPlayerSDK.Product.Hydrated? {
    get
  }
  public var base: BambuserPlayerSDK.Product.Base? {
    get
  }
}
public struct PurchaseTrackingEvent : BambuserPlayerSDK.TrackingEvent {
  public let event: BambuserPlayerSDK.TrackingEventType
  public let orderId: Swift.String
  public let orderValue: Foundation.NSNumber
  public let orderProductIds: Swift.String
  public let currency: Swift.String
  public let orderCountry: Swift.String?
  public init(orderId: Swift.String, orderValue: Foundation.NSNumber, orderProductIds: [Swift.String], currency: Swift.String, orderCountry: Swift.String? = nil)
  public func toDict() -> [Swift.String : Any]
}
public enum ShowStatus : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Equatable {
  case loading
  case startingSoon
  case playingRecorded
  case playingLive
  case pausedByHost
  case ended
  case unknown
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BambuserPlayerSDK.ShowStatus]
  public typealias RawValue = Swift.String
  public static var allCases: [BambuserPlayerSDK.ShowStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension BambuserPlayerSDK.ShowStatus {
  public var isPlaying: Swift.Bool {
    get
  }
}
public struct SizeVariant : Swift.Equatable, Swift.Codable {
  public init(id: Swift.String, name: Swift.String, quantityInStock: Swift.Int, currencyCode: Swift.String, currentPrice: Foundation.Decimal, originalPrice: Foundation.Decimal? = nil)
  public static func == (a: BambuserPlayerSDK.SizeVariant, b: BambuserPlayerSDK.SizeVariant) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIFont.Weight : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public protocol TrackingEvent {
  var event: BambuserPlayerSDK.TrackingEventType { get }
  func toDict() -> [Swift.String : Any]
}
public enum TrackingEventType : Swift.String {
  case purchase
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol PictureInPictureRestoreComponent : AnyObject {
}
public protocol PictureInPictureCloseComponent : AnyObject {
}
extension UIKit.UIView : BambuserPlayerSDK.PictureInPictureRestoreComponent {
}
extension UIKit.UIViewController : BambuserPlayerSDK.PictureInPictureRestoreComponent {
}
extension UIKit.UIView : BambuserPlayerSDK.PictureInPictureCloseComponent {
}
extension UIKit.UIViewController : BambuserPlayerSDK.PictureInPictureCloseComponent {
}
extension BambuserPlayerSDK.PictureInPictureRestoreComponent {
  public func registerPictureInPictureRestoreAction(_ action: @escaping BambuserPlayerSDK.PictureInPictureState.RestoreAction)
}
extension BambuserPlayerSDK.PictureInPictureCloseComponent {
  public func registerPictureInPictureCloseAction(_ action: @escaping BambuserPlayerSDK.PictureInPictureState.CloseAction)
}
@available(iOS 13.0, *)
public struct PictureInPictureRestoreModifier : SwiftUI.ViewModifier {
  public init(restoreAction: @escaping BambuserPlayerSDK.PictureInPictureRestoreModifier.RestoreAction)
  public typealias RestoreAction = (@escaping () -> Swift.Void) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public func body(content: BambuserPlayerSDK.PictureInPictureRestoreModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s17BambuserPlayerSDK09PictureInD15RestoreModifierV4body7contentQr7SwiftUI05_ViewG8_ContentVyACG_tF", 0) __
}
@available(iOS 13.0, *)
public struct PictureInPictureCloseModifier : SwiftUI.ViewModifier {
  public init(closeAction: @escaping BambuserPlayerSDK.PictureInPictureCloseModifier.CloseAction)
  public typealias CloseAction = () -> Swift.Void
  @_Concurrency.MainActor(unsafe) public func body(content: BambuserPlayerSDK.PictureInPictureCloseModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s17BambuserPlayerSDK09PictureInD13CloseModifierV4body7contentQr7SwiftUI05_ViewG8_ContentVyACG_tF", 0) __
}
@available(iOS 13.0, *)
extension SwiftUI.View {
  public func pictureInPictureRestore(action: @escaping BambuserPlayerSDK.PictureInPictureRestoreModifier.RestoreAction) -> some SwiftUI.View
  
  public func pictureInPictureClose(action: @escaping BambuserPlayerSDK.PictureInPictureCloseModifier.CloseAction) -> some SwiftUI.View
  
}
extension BambuserPlayerSDK.BambuserPlayerContext.Event : Swift.Equatable {}
extension BambuserPlayerSDK.BambuserPlayerContext.Event : Swift.Hashable {}
extension BambuserPlayerSDK.BambuserPlayerEvent.ChatMessage.ClientType : Swift.Equatable {}
extension BambuserPlayerSDK.BambuserPlayerEvent.ChatMessage.ClientType : Swift.Hashable {}
extension BambuserPlayerSDK.PictureInPictureConfiguration.CodingKeys : Swift.Equatable {}
extension BambuserPlayerSDK.PictureInPictureConfiguration.CodingKeys : Swift.Hashable {}
extension BambuserPlayerSDK.PlayerConfiguration.CodingKeys : Swift.Equatable {}
extension BambuserPlayerSDK.PlayerConfiguration.CodingKeys : Swift.Hashable {}
extension BambuserPlayerSDK.PlayerOverlayVisiblity : Swift.Hashable {}
extension BambuserPlayerSDK.PlayerOverlayVisiblity : Swift.RawRepresentable {}
extension BambuserPlayerSDK.PlayerPipAction : Swift.Equatable {}
extension BambuserPlayerSDK.PlayerPipAction : Swift.Hashable {}
extension BambuserPlayerSDK.PlayerState : Swift.Hashable {}
extension BambuserPlayerSDK.PlayerState : Swift.RawRepresentable {}
extension BambuserPlayerSDK.PlayerUIConfiguration.CodingKeys : Swift.Equatable {}
extension BambuserPlayerSDK.PlayerUIConfiguration.CodingKeys : Swift.Hashable {}
extension BambuserPlayerSDK.ShowStatus : Swift.Hashable {}
extension BambuserPlayerSDK.ShowStatus : Swift.RawRepresentable {}
extension BambuserPlayerSDK.TrackingEventType : Swift.Equatable {}
extension BambuserPlayerSDK.TrackingEventType : Swift.Hashable {}
extension BambuserPlayerSDK.TrackingEventType : Swift.RawRepresentable {}
